/*
   Find a problem at projecteuler.net then create the solution. Add a comment beneath your solution that
   includes a description of the problem. Upload your solution to github. Tweet me a link to your solution.

   Pentagonal numbers - Problem 44
   Pentagonal numbers are generated by the formula, P_n = n(3n - 1)/2. The first ten pentagonal numbers are:

       1, 5, 12, 22, 35, 51, 70, 92, 117, 145,...

   It can be seen that P_4 + P_7 = 22 + 70 = 92 = P_8. However, the difference, 70 - 22 = 48, is not pentagonal.

   Find the pair of pentagonal numbers, P_j and P_k, for which their sum and difference are pentagonal and
   D = |P_k - P_j| is minimised; what is the value of D?
*/

/*
   Solution:

   To find D we need to find the values of k and j such that

       (1.) the absolute difference between P_k and P_j is the smallest it could
       (2.) P_k + P_j = P_x and P_k - P_j = P_y for some natural numbers x and y.

   Observation 1:

   Since P_n is a strictly increasing sequence, we know that the difference between any P_k and P_j will
   increase as either k or j increases. So finding the pair of k and j that statisfies (1.) and (2.) means
   we can search for the first few possible pairs that satisfy (2.) and select the pair that has the smallest
   difference for P_k and P_j.
*/

package main

import "fmt"

func main() {
	// Start at 100 and increase the argument by an order of magnitude until d isn't 0
	arr, m := getNumbers(10000)

	// Initialize the solution variables
	var d, indexK, indexJ int

	// For each pair of pentagonal numbers, check if they satisfy (2.)
	// If (2.) is satisfied, check if its smaller than previously recorded value
	for j := 1; j < len(arr); j++ {
		for k := j + 1; k < len(arr); k++ {
			if m[arr[k]-arr[j]] && m[arr[k]+arr[j]] {
				if arr[k]-arr[j] < d || d == 0 {
					d, indexJ, indexK = arr[k]-arr[j], j, k
				}
			}
		}
	}

	// Print the results
	fmt.Println("For k =", indexK, "and j =", indexJ, ", D =", d)
}

// Get a list of the first n pentagonal numbers and a map to quickly look up if a number less
// than n is pentagonal
func getNumbers(n int) ([]int, map[int]bool) {

	arr := make([]int, n)
	m := make(map[int]bool, n)

	for i := 0; i < n; i++ {
		arr[i] = (i * (3*i - 1)) / 2
		m[arr[i]] = true
	}

	return arr, m
}
